package generator

import (
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/reflect/protoreflect"
)

// GenerateTestFile generates go test file to test service client methods.
func GenerateTestFile(gen *protogen.Plugin, file *protogen.File) *protogen.GeneratedFile {
	filename := file.GeneratedFilenamePrefix + "_client.pb_test.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by protoc-gen-go-kit-grpc.")
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()

	g.P(`import(
	"context"
	kitlog "github.com/go-kit/log"
	"log"
	"os"
	"testing"
)
`)

	//create client
	for _, srv := range file.Services {
		for _, method := range srv.Methods {

			g.P("func Test", srv.GoName, "_", method.GoName, "(t *testing.T) {")
			g.P(`
	var logger kitlog.Logger
	logger = kitlog.NewJSONLogger(os.Stdout)
	logger = kitlog.With(logger, "ts", kitlog.DefaultTimestampUTC)
	logger = kitlog.With(logger, "caller", kitlog.DefaultCaller)
`)
			g.P("client := New", srv.GoName, "ClientImpl(logger)")
			g.P("rsp, err := client.", method.GoName, "(context.TODO(), &", method.Input.GoIdent.GoName, "{")

			for _, field := range method.Input.Fields {
				fillFiled(g, field)
			}
			g.P("})")

			g.P("if err != nil {")
			g.P("t.Error(err)")
			g.P("return")
			g.P("}")

			g.P("log.Printf(\"rsp: %v\", rsp)")

			g.P("}")

		}

	}

	return g
}

func fillFiled(g *protogen.GeneratedFile, field *protogen.Field) {
	if field.Message != nil {
		g.P(field.GoName, ": &", field.GoName, "{")

		for _, field := range field.Message.Fields {
			fillFiled(g, field)
		}

		g.P("},")

	} else {
		g.P("\t", field.GoName, ": ", getDefaultValue(field), ",")
	}

	field.Desc.Kind()

}

func getDefaultValue(field *protogen.Field) string {

	if field.Desc.HasOptionalKeyword() {
		return "new(" + getGolangType(field) + ")"
	}

	if field.Desc.Cardinality() == protoreflect.Repeated {
		return "[]" + getGolangType(field) + "{}"
	}

	switch field.Desc.Kind() {
	case protoreflect.BoolKind:
		return "false"
	case protoreflect.EnumKind:
		return removeAfterUnderline(field.Enum.GoIdent.GoName) + "_" + string(field.Enum.Values[0].Desc.Name())
	case protoreflect.Int32Kind:
		return "0"
	case protoreflect.Sint32Kind:
		return "0"
	case protoreflect.Uint32Kind:
		return "0"
	case protoreflect.Int64Kind:
		return "0"
	case protoreflect.Sint64Kind:
		return "0"
	case protoreflect.Uint64Kind:
		return "0"
	case protoreflect.Sfixed32Kind:
		return "nil"
	case protoreflect.Fixed32Kind:
		return "0"
	case protoreflect.FloatKind:
		return "0.0"
	case protoreflect.Sfixed64Kind:
		return "0"
	case protoreflect.Fixed64Kind:
		return "0"
	case protoreflect.DoubleKind:
		return "0.0"
	case protoreflect.StringKind:
		return "\"string\""
	case protoreflect.BytesKind:
		return "[]byte{}"
	case protoreflect.MessageKind:
		return "nil"
	case protoreflect.GroupKind:
		return "nil"
	}
	return ""
}

func getGolangType(field *protogen.Field) string {
	switch field.Desc.Kind() {
	case protoreflect.BoolKind:
		return "bool"
	case protoreflect.EnumKind:
		return field.Enum.GoIdent.GoName
	case protoreflect.Int32Kind:
		return "int32"
	case protoreflect.Sint32Kind:
		return "int32"
	case protoreflect.Uint32Kind:
		return "uint32"
	case protoreflect.Int64Kind:
		return "int64"
	case protoreflect.Sint64Kind:
		return "int64"
	case protoreflect.Uint64Kind:
		return "uint64"
	case protoreflect.Sfixed32Kind:
		return "int32"
	case protoreflect.Fixed32Kind:
		return "int32"
	case protoreflect.FloatKind:
		return "float32"
	case protoreflect.Sfixed64Kind:
		return "int64"
	case protoreflect.Fixed64Kind:
		return "int64"
	case protoreflect.DoubleKind:
		return "float64"
	case protoreflect.StringKind:
		return "string"
	case protoreflect.BytesKind:
		return "[]byte"
	case protoreflect.MessageKind:
		return field.GoName
	case protoreflect.GroupKind:
		return field.GoName
	}
	return ""
}

func removeAfterUnderline(name string) string {

	for i := len(name) - 1; i >= 0; i-- {
		if name[i] == '_' {
			return name[:i]
		}
	}

	return name
}
