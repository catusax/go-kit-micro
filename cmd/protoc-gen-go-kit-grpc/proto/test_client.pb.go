// Code generated by protoc-gen-go-kit-grpc. DO NOT EDIT.

package test

import (
	"context"
	"github.com/catusax/go-kit-micro/sd"
	"github.com/go-kit/kit/endpoint"
	"github.com/go-kit/log"
	"google.golang.org/grpc"
)

type ClientImpl struct {
	insert       endpoint.Endpoint
	delete       endpoint.Endpoint
	clientStream endpoint.Endpoint
	serverStream endpoint.Endpoint
	bidiStream   endpoint.Endpoint
}

func NewWalletClientImpl(logger log.Logger) *ClientImpl {
	instancer, err := sd.NewInstancer("wallet.service", logger)
	if err != nil {
		panic(err)
	}

	return &ClientImpl{

		insert: sd.GetEndPoint(instancer, func(conn *grpc.ClientConn, ctx context.Context, request interface{}) (interface{}, error) {
			client := NewWalletClient(conn)
			req := request.(*InsertRequest)

			return client.Insert(ctx, req)
		}, logger),
		delete: sd.GetEndPoint(instancer, func(conn *grpc.ClientConn, ctx context.Context, request interface{}) (interface{}, error) {
			client := NewWalletClient(conn)
			req := request.(*DeleteRequest)

			return client.Delete(ctx, req)
		}, logger),
		clientStream: sd.GetEndPoint(instancer, func(conn *grpc.ClientConn, ctx context.Context, request interface{}) (interface{}, error) {
			client := NewWalletClient(conn)

			return client.ClientStream(ctx)
		}, logger),
		serverStream: sd.GetEndPoint(instancer, func(conn *grpc.ClientConn, ctx context.Context, request interface{}) (interface{}, error) {
			client := NewWalletClient(conn)
			req := request.(*ServerStreamRequest)

			return client.ServerStream(ctx, req)
		}, logger),
		bidiStream: sd.GetEndPoint(instancer, func(conn *grpc.ClientConn, ctx context.Context, request interface{}) (interface{}, error) {
			client := NewWalletClient(conn)

			return client.BidiStream(ctx)
		}, logger),
	}
}

// Insert
// insert 234124321
// adasda
// frtgrt
// asdad
func (n *ClientImpl) Insert(ctx context.Context, req *InsertRequest) (*InsertResponse, error) {
	rsp, err := n.insert(ctx, req)
	if err != nil {
		return nil, err
	}
	res := rsp.(*InsertResponse)
	return res, err
}

// Delete
func (n *ClientImpl) Delete(ctx context.Context, req *DeleteRequest) (*DeleteResponse, error) {
	rsp, err := n.delete(ctx, req)
	if err != nil {
		return nil, err
	}
	res := rsp.(*DeleteResponse)
	return res, err
}

// ClientStream
func (n *ClientImpl) ClientStream(ctx context.Context) (Wallet_BidiStreamClient, error) {
	rsp, err := n.clientStream(ctx, nil)
	if err != nil {
		return nil, err
	}
	res := rsp.(Wallet_BidiStreamClient)
	return res, err
}

// ServerStream
func (n *ClientImpl) ServerStream(ctx context.Context, req *ServerStreamRequest) (Wallet_ServerStreamClient, error) {
	rsp, err := n.serverStream(ctx, req)
	if err != nil {
		return nil, err
	}
	res := rsp.(Wallet_ServerStreamClient)
	return res, err
}

// BidiStream
func (n *ClientImpl) BidiStream(ctx context.Context) (Wallet_BidiStreamClient, error) {
	rsp, err := n.bidiStream(ctx, nil)
	if err != nil {
		return nil, err
	}
	res := rsp.(Wallet_BidiStreamClient)
	return res, err
}
